use crate::state::{marketplace::Marketplace, listing::Listing};
use anchor_lang::prelude::*;
use anchor_spl::{
    associated_token::AssociatedToken,
    metadata::{MasterEditionAccount, Metadata, MetadataAccount},
    token::{transfer_checked, TransferChecked},
    token_interface::{Mint, TokenAccount, TokenInterface},
};

/// # List Instruction
/// Allows a user to list an NFT for sale on the marketplace
/// Creates a listing PDA and transfers the NFT to a vault for safekeeping
#[derive(Accounts)]
pub struct List<'info> {
    /// The maker (seller) who is listing their NFT
    /// Must sign the transaction and pays for account creation
    #[account(mut)]
    pub maker: Signer<'info>,

    /// The marketplace account that this listing belongs to
    /// PDA derived from "marketplace" and marketplace name
    #[account(
        seeds = [b"marketplace", marketplace.name.as_str().as_bytes()],
        bump = marketplace.bump,
    )]
    pub marketplace: Account<'info, Marketplace>,

    /// The mint address of the NFT being listed
    /// Must be a valid NFT token mint
    pub maker_mint: InterfaceAccount<'info, Mint>,

    /// The maker's token account holding the NFT
    /// This is where the NFT will be transferred from
    #[account(
        mut,
        associated_token::mint = maker_mint,
        associated_token::authority = maker,
        associated_token::token_program = token_program,
    )]
    pub maker_ata: InterfaceAccount<'info, TokenAccount>,

    /// The vault token account that will hold the NFT during the listing
    /// Authority is the listing PDA so it can transfer back on cancellation or to buyer on purchase
    #[account(
        init, 
        payer = maker,
        associated_token::mint = maker_mint,
        associated_token::authority = listing,
        associated_token::token_program = token_program,
    )]
    pub vault: InterfaceAccount<'info, TokenAccount>,

    /// The listing account to be created
    /// PDA derived from marketplace address and NFT mint
    /// Stores information about the listing
    #[account(
        init,
        payer = maker,
        seeds = [marketplace.key().as_ref(), maker_mint.key().as_ref()],
        bump,
        space = Listing::INIT_SPACE,
    )]
    pub listing: Account<'info, Listing>,

    /// The mint address of the collection this NFT belongs to
    /// Used for verification of collection membership
    pub collection_mint: InterfaceAccount<'info, Mint>,
    
    /// Metadata account of the NFT being listed
    /// Used to verify the NFT belongs to the specified collection
    #[account(
        seeds = [b"metadata", metadata_program.key().as_ref(), maker_mint.key().as_ref()],
        seeds::program = metadata_program.key(),
        bump,
        constraint = metadata.collection.as_ref().unwrap().key == collection_mint.key(),
        constraint = metadata.collection.as_ref().unwrap().verified == true,
    )]
    pub metadata: Account<'info, MetadataAccount>,
    
    /// Master edition account of the NFT
    /// Used to verify this is an original NFT (not a print)
    #[account(
        seeds = [b"metadata", metadata_program.key().as_ref(), maker_mint.key().as_ref(), b"edition"],
        seeds::program = metadata_program.key(),
        bump,
    )]
    pub master_edition: Account<'info, MasterEditionAccount>,

    /// Metaplex Token Metadata program
    /// @0 used for constraint validation
    pub metadata_program: Program<'info, Metadata>,
    
    /// Required for creating associated token accounts
    pub associated_token_program: Program<'info, AssociatedToken>,
    
    /// Required for system operations
    pub system_program: Program<'info, System>,
    
    /// Required for token operations
    pub token_program: Interface<'info, TokenInterface>,
}

/// Implementation of the list instruction logic
impl<'info> List <'info> {
    /// Creates a new listing with the specified price
    /// 
    /// # Parameters
    /// * `price` - The price in lamports (SOL) for the NFT
    /// * `bumps` - PDA bump seeds generated by Anchor
    pub fn create_listing(&mut self, price: u64, bumps: &ListBumps) -> Result<()> {
        // Initialize the listing state with provided values
        self.listing.set_inner(Listing {
            maker: self.maker.key(), 
            maker_mint: self.maker_mint.key(), 
            price, 
            bump: bumps.listing
        });

        Ok(())
    }

    /// Transfers the NFT from the maker's account to the vault
    /// Called after creating the listing to escrow the NFT
    pub fn deposit_nft(&mut self) -> Result<()> {
        // Get the token program for CPI
        let cpi_program = self.token_program.to_account_info();
    
        // Create the transfer accounts structure for CPI
        let cpi_accounts = TransferChecked {
            from: self.maker_ata.to_account_info(),
            mint: self.maker_mint.to_account_info(),
            to: self.vault.to_account_info(),
            authority: self.maker.to_account_info()
        };

        // Create the CPI context
        let cpi_ctx = CpiContext::new(cpi_program, cpi_accounts);

        // Execute the transfer (always amount=1 for NFTs, decimals from mint)
        transfer_checked(cpi_ctx, 1, self.maker_mint.decimals)
    }
}