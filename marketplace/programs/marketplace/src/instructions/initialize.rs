use crate::error::MarketplaceError;
use crate::state::marketplace::Marketplace;
use anchor_lang::prelude::*;
use anchor_spl::token_interface::{Mint, TokenInterface};

/// # Initialize Instruction
/// Creates a new marketplace with admin control, treasury, and reward token
/// This is the first instruction that must be called to set up the marketplace
#[derive(Accounts)]
#[instruction(name: String)]
pub struct Initialize<'info> {
    /// The admin account that will control the marketplace
    /// This account pays for the creation of all PDAs
    #[account(mut)]
    pub admin: Signer<'info>,

    /// The marketplace account to be created
    /// PDA derived from "marketplace" and the provided name
    /// Stores configuration information about the marketplace
    #[account(
        init,
        payer = admin,
        seeds = [b"marketplace", name.as_str().as_bytes()],
        bump,
        space = Marketplace::INIT_SPACE,
    )]
    pub marketplace: Account<'info, Marketplace>,

    /// Treasury account that will receive marketplace fees
    /// PDA derived from "rewards" and the marketplace address
    #[account(
        seeds = [b"treasury", marketplace.key().as_ref()],
        bump,
    )]
    pub treasury: SystemAccount<'info>,

    /// Reward token mint that will be used for marketplace incentives
    /// Owned by the marketplace PDA to allow minting rewards
    #[account(
        init,
        payer = admin,
        seeds = [b"rewards", marketplace.key().as_ref()],
        bump,
        mint::decimals = 6,
        mint::authority = marketplace,
        mint::token_program = token_program,
    )]
    pub reward_mint: InterfaceAccount<'info, Mint>,

    /// Required for creating new accounts
    pub system_program: Program<'info, System>,

    /// Required for token operations
    pub token_program: Interface<'info, TokenInterface>,
}

/// Implementation of the initialize instruction logic
impl<'info> Initialize<'info> {
    /// Initializes the marketplace account with provided parameters
    ///
    /// # Parameters
    /// * `name` - Name of the marketplace
    /// * `fee` - Fee percentage in basis points (1/100 of 1%)
    /// * `bumps` - PDA bump seeds generated by Anchor
    pub fn init(&mut self, name: String, fee: u16, bumps: &InitializeBumps) -> Result<()> {
        // Validate fee - ensure it's not greater than 100%
        require!(fee <= 10000, MarketplaceError::InvalidFee);

        // Initialize the marketplace state with provided values
        self.marketplace.set_inner(Marketplace {
            admin: self.admin.key(),
            fee,
            bump: bumps.marketplace,
            treasury_bump: bumps.treasury,
            name,
        });

        Ok(())
    }
}
